AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Tailscale subnet router into an Autoscaling Group'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC for the Tailscale subnet router

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for the Auto Scaling Group

  TailscaleAuthKey:
    Type: String
    NoEcho: true
    Description: Tailscale authentication key

  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the EC2 instances

  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type

  MinSize:
    Type: Number
    Default: 2
    Description: Minimum size of the Auto Scaling Group

  MaxSize:
    Type: Number
    Default: 2
    Description: Maximum size of the Auto Scaling Group

  DesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired capacity of the Auto Scaling Group

  AdvertiseTags:
    Type: CommaDelimitedList
    Default: ''
    Description: ACL tags to request (comma-separated list, each must start with 'tag:')

  EnableSSH:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable SSH access via Tailscale

  Track:
    Type: String
    Default: 'stable'
    AllowedValues: ['stable', 'unstable']
    Description: Version of the Tailscale client to install

  MaxRetries:
    Type: Number
    Default: 3
    Description: Maximum number of retries to connect to the control server

  RetryDelay:
    Type: Number
    Default: 5
    Description: Delay in seconds between retries to connect to the control server

  Hostname:
    Type: String
    Default: ''
    Description: Hostname for the Tailscale node (leave empty to use default)

  OpenInboundSecurityGroup:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Open UDP port 41641 on the security group

Conditions:
  VpcSelected: !Not [!Equals [!Ref VpcId, '']]
  UseCustomHostname: !Not [!Equals [!Ref Hostname, '']]
  OpenInboundPort: !Equals [!Ref OpenInboundSecurityGroup, 'true']

Resources:
  SubnetSelector:
    Type: AWS::EC2::SecurityGroup
    Condition: VpcSelected
    Properties:
      GroupName: !Sub '${AWS::StackName}-subnet-selector'
      GroupDescription: Dummy security group to force subnet selection
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 127.0.0.1/32

  TailscaleSubnetRouterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-sg'
      GroupDescription: Security group for Tailscale subnet router
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - !If
          - OpenInboundPort
          - IpProtocol: udp
            FromPort: 41641
            ToPort: 41641
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  TailscaleSubnetRouterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'lt-${AWS::StackName}'
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !Ref TailscaleSubnetRouterSecurityGroup
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          HttpEndpoint: enabled
        UserData: 
          Fn::Base64: !Sub 
            - |
              #!/bin/bash
              # Enable IP forwarding
              echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf
              sudo sysctl -p /etc/sysctl.conf

              # Install Tailscale
              curl -fsSL https://tailscale.com/install.sh | sh

              # Set up Tailscale
              max_retries="${MaxRetries}"
              retry_delay="${RetryDelay}"
              i=1
              while [ $i -le $max_retries ]
              do
                sudo systemctl enable --now tailscaled
                
                tailscale_cmd="tailscale up \
                  --authkey ${TailscaleAuthKey} \
                  --advertise-routes=${VpcCidr} \
                  --ssh=${EnableSSH}"
                
                if [ -n "${AdvertiseTagsJoined}" ]; then
                  tailscale_cmd="$tailscale_cmd --advertise-tags=${AdvertiseTagsJoined}"
                fi

                if [ -n "${Hostname}" ]; then
                  tailscale_cmd="$tailscale_cmd --hostname=${Hostname}"
                fi
                
                # Execute the tailscale up command
                eval "$tailscale_cmd"
                
                # Check the exit status of the previous command
                if [ $? -eq 0 ]; then
                  echo "Tailscale installation and configuration succeeded"
                  exit 0
                else
                  echo "Tailscale installation and configuration failed. Retry attempt $i"
                  sleep $retry_delay
                fi
                
                i=$((i + 1))
              done
            - VpcCidr: !GetAtt SelectedVpcInfo.CidrBlock
              AdvertiseTagsJoined: !Join [",", !Ref AdvertiseTags]
              Hostname: !If [UseCustomHostname, !Ref Hostname, '']

  TailscaleSubnetRouterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref AWS::StackName
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier: !If 
        - VpcSelected
        - !Ref SubnetIds
        - !Ref AWS::NoValue
      LaunchTemplate: 
        LaunchTemplateId: !Ref TailscaleSubnetRouterLaunchTemplate
        Version: !GetAtt TailscaleSubnetRouterLaunchTemplate.LatestVersionNumber
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-instance'
          PropagateAtLaunch: true

  TailscaleSubnetRouterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/ec2/"
      Roles: 
        - !Ref TailscaleSubnetRouterRole

  TailscaleSubnetRouterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/ec2/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
        - arn:aws:iam::aws:policy/AutoScalingFullAccess

  SelectedVpcInfo:
    Type: Custom::VpcInfo
    Properties:
      ServiceToken: !GetAtt VpcInfoFunction.Arn
      VpcId: !Ref VpcId

  VpcInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt VpcInfoFunctionRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          import boto3

          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              try:
                  vpc_id = event['ResourceProperties']['VpcId']
                  ec2 = boto3.client('ec2')
                  response = ec2.describe_vpcs(VpcIds=[vpc_id])
                  cidr_block = response['Vpcs'][0]['CidrBlock']
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'CidrBlock': cidr_block})
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

      Runtime: python3.8
      Timeout: 30

  VpcInfoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VpcInfoPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref TailscaleSubnetRouterASG

  SecurityGroupId:
    Description: ID of the Security Group
    Value: !Ref TailscaleSubnetRouterSecurityGroup

  SelectedVpcId:
    Description: Selected VPC ID
    Value: !Ref VpcId

  VpcCidrBlock:
    Description: CIDR Block of the selected VPC
    Value: !GetAtt SelectedVpcInfo.CidrBlock